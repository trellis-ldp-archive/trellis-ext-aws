plugins {
    id 'com.github.ben-manes.versions' version '0.20.0'
    id 'com.github.hierynomus.license' version '0.15.0'
    id 'com.github.kt3k.coveralls' version '2.8.2'
    id 'com.gradle.build-scan' version '2.1'
    id 'net.researchgate.release' version '2.8.0'
    id 'org.owasp.dependencycheck' version '4.0.2'
    id 'org.sonarqube' version '2.7'
    id 'biz.aQute.bnd.builder' version '4.1.0' apply false
    id 'com.palantir.docker' version '0.21.0' apply false
    id 'nebula.ospackage' version '6.1.1' apply false
}

ext {

    /* Dependencies */
    awsJerseyVersion = '1.3'
    awsVersion = '1.11.490'
    commonsCodecVersion = '1.11'
    commonsCompressVersion = '1.18'
    commonsRdfVersion = '0.5.0'
    slf4jVersion = '1.7.25'
    guavaVersion = '27.0.1-jre'
    dropwizardVersion = '1.3.8'
    jenaVersion = '3.10.0'
    jdbiVersion = '3.6.0'
    tamayaVersion = '0.3-incubating'
    trellisVersion = '0.8.0-SNAPSHOT'
    trellisDbVersion = '0.2.0-SNAPSHOT'
    snakeyamlVersion = '1.23'

    /* Databases */
    mysqlVersion = '8.0.14'
    postgresVersion = '42.2.5'

    /* Testing */
    activationVersion = '1.1.1'
    apiguardianVersion = '1.0.0'
    awaitilityVersion = '3.1.6'
    checkstyleVersion = '8.12'
    commonsIoVersion = '2.6'
    commonsTextVersion = '1.6'
    h2Version = '1.4.197'
    jacocoVersion = '0.8.2'
    jaxbVersion = '2.3.0'
    jerseyVersion = '2.27'
    junitPlatformVersion = '1.3.2'
    junitVersion = '5.3.2'
    liquibaseVersion = '3.6.2'
    logbackVersion = '1.2.3'
    mockitoVersion = '2.23.4'
    otjPgVersion = '0.13.0'

    /* OSGi */
    projectOsgiVersion = project.version.replaceAll("-SNAPSHOT", ".SNAPSHOT")
}

allprojects { subproj ->
    apply plugin: 'java-library'
    apply plugin: 'maven-publish'
    apply plugin: 'signing'
    apply plugin: 'checkstyle'
    apply plugin: 'com.github.hierynomus.license'
    apply plugin: 'jacoco'

    ext {
        vendor = 'Trellis LDP'
        homepage = 'https://www.trellisldp.org'
        docURL = 'https://www.trellisldp.org/docs/trellis/current/apidocs/'
        license = 'Apache 2'
    }

    jacoco.toolVersion = jacocoVersion

    group = 'org.trellisldp.ext'

    repositories {
        mavenCentral()
        jcenter()
        mavenLocal()
		maven {
            url "https://oss.sonatype.org/content/repositories/snapshots"
        }
    }

    dependencies {
        testImplementation("org.junit.jupiter:junit-jupiter-api:${junitVersion}")
        testImplementation("org.apiguardian:apiguardian-api:${apiguardianVersion}")
        testRuntime("org.junit.jupiter:junit-jupiter-engine:${junitVersion}")
    }

    gradle.projectsEvaluated {
        tasks.withType(JavaCompile) {
            options.compilerArgs << "-Xlint:unchecked" << "-Xlint:deprecation"
        }
    }

    release {
        tagTemplate = '$name-$version'
        git {
            requireBranch = 'master'
            signTag = true
        }
    }
}

subprojects { subproj ->

    sourceCompatibility = 1.8
    targetCompatibility = 1.8

    jar {
        from("$rootDir/LICENSE") {
            into "META-INF"
        }
    }

    checkstyle {
        configFile = rootProject.file('buildtools/src/main/resources/checkstyle/checkstyle.xml')
        configProperties.checkstyleConfigDir = rootProject.file('buildtools/src/main/resources/checkstyle/')
        toolVersion = checkstyleVersion
    }

    task javadocJar(type: Jar) {
        classifier 'javadoc'
        from("$rootDir/LICENSE") {
            into "META-INF"
        }
        from javadoc
    }

    task sourceJar(type: Jar) {
        classifier 'sources'
        from("$rootDir/LICENSE") {
            into "META-INF"
        }
        from sourceSets.main.allSource
    }

    task processConfig(type: Copy) {
        from('src/main/cfg') {
            include '**/*.cfg'
        }
        into 'build/cfg/main'
    }

    classes {
        classes.dependsOn processConfig
    }

    artifacts {
        archives javadocJar
        archives sourceJar
    }

    license {
        include "**/*.java"
        header rootProject.file('buildtools/src/main/resources/license/HEADER.txt')
        strictCheck true
        mapping {
            java = 'SLASHSTAR_STYLE'
        }
    }

    publishing {
        publications {
            mavenJava(MavenPublication) {
                pom {
                    packaging = 'jar'
                    name = 'Trellis Linked Data Server: aws cloud extension'
                    description = 'Cloud-based components for the Trellis linked data server'
                    url = "https://www.trellisldp.org"
                    inceptionYear = '2017'

                    organization {
                        name = project.vendor
                        url = project.homepage
                    }

                    developers {
                        developer {
                            id = 'acoburn'
                            name = 'Aaron Coburn'
                            email = 'acoburn (at) apache (dot) org'
                        }
                    }

                    scm {
                        connection = 'scm:git:git://github.com/trellis-ldp/trellis-ext-aws.git'
                        developerConnection = 'scm:git:git@github.com/trellis-ldp/trellis-ext-aws.git'
                        url = 'https://github.com/trellis-ldp/trellis-ext-aws'
                        tag = 'HEAD'
                    }

                    licenses {
                        license {
                            name = 'Apache License, Version 2.0'
                            url = 'http://www.apache.org/licenses/LICENSE-2.0'
                            comments = 'Copyright (c) 2017-2019 Trellis LDP'
                        }
                    }
                }
                pom.withXml {
                    // eliminate test-scoped dependencies
                    asNode().dependencies.removeAll { dep -> dep.scope == "test" }
                }

                from components.java

                artifact(sourceJar) {
                    classifier = 'sources'
                }

                artifact(javadocJar) {
                    classifier = 'javadoc'
                }
            }
        }
        repositories {
            maven {
                def sonatypeUsername = project.hasProperty('ossrhUsername') ? ossrhUsername : System.getenv("SONATYPE_USERNAME") ?: ""
                def sonatypePassword = project.hasProperty('ossrhPassword') ? ossrhPassword : System.getenv("SONATYPE_PASSWORD") ?: ""
                if (version.endsWith("SNAPSHOT")) {
                    url "https://oss.sonatype.org/content/repositories/snapshots/"
                } else {
                    url "https://oss.sonatype.org/service/local/staging/deploy/maven2"
                }
                credentials {
                    username sonatypeUsername
                    password sonatypePassword
                }
            }
        }
    }

    tasks.withType(PublishToMavenRepository) {
        onlyIf {
            ! subproj.name.endsWith("-deployment")
        }
    }
    tasks.withType(PublishToMavenLocal) {
        onlyIf {
            ! subproj.name.endsWith("-deployment")
        }
    }
    task install(dependsOn: [assemble, publishToMavenLocal])
    task upload(dependsOn: [assemble, publish])

    processResources {
        outputs.upToDateWhen { false }
    }

    signing {
        required {
            !version.toString().endsWith('-SNAPSHOT') && tasks.withType(PublishToMavenRepository).find {
                gradle.taskGraph.hasTask it
            }
        }
        sign publishing.publications
    }

    gradle.taskGraph.whenReady( { graph ->
        tasks.withType(AbstractArchiveTask).each { archive ->
            archive.doLast {
                ant.checksum file: archive.archivePath, algorithm: 'sha-256', format: 'MD5SUM', fileext: '.sha256'
            }
        }
    })

    task docs(type: Javadoc) {
        outputs.upToDateWhen { false }
        source sourceSets.main.allJava
        classpath = files(sourceSets.main.compileClasspath)
        destinationDir = new File(projectDir, "docs/${version}")
        options {
            links "https://docs.oracle.com/javase/8/docs/api/"
            links 'https://docs.oracle.com/javaee/7/api/'
            links 'https://www.trellisldp.org/docs/trellis/current/apidocs/'
            links 'https://commons.apache.org/proper/commons-lang/javadocs/api-3.8/'
            links 'https://commons.apache.org/proper/commons-rdf/apidocs/'
            links 'https://docs.aws.amazon.com/AWSJavaSDK/latest/javadoc/'
        }
    }

    javadoc {
        options.tags = ["apiNote:a:API Note:",
                "implSpec:a:Implementation Requirements:",
                "implNote:a:Implementation Note:"]

        if (JavaVersion.current().isJava9Compatible()) {
            options.addBooleanOption('html5', true)
        }
    }

    sonarqube {
        // Only record this for jdk8 builds
        skipProject = ! JavaVersion.current().isJava8()
    }

    test {
        useJUnitPlatform()
    }

    afterReleaseBuild.dependsOn docs
    afterReleaseBuild.dependsOn publish

    jacoco {
        toolVersion = jacocoVersion
    }

    jacocoTestReport {
        reports {
            xml.enabled = true
            html.enabled = true
        }
    }
}

configure(rootProject) {

    task apidocs(type: Javadoc, dependsOn: getTasksByName('docs', true)) {
        outputs.upToDateWhen { false }
        destinationDir = new File(projectDir, "docs/apidocs/${project.version}")
        title = "Trellis Linked Data Server (Cloud Extension) Documentation"
        exclude '**/impl/*'
        exclude '**/*Tests.java'
        options {
            memberLevel = JavadocMemberLevel.PUBLIC
            links "https://docs.oracle.com/javase/8/docs/api/"
            links 'https://docs.oracle.com/javaee/7/api/'
            links 'https://www.trellisldp.org/docs/trellis/current/apidocs/'
            links 'https://commons.apache.org/proper/commons-lang/javadocs/api-3.8/'
            links 'https://commons.apache.org/proper/commons-rdf/apidocs/'
            links 'https://docs.aws.amazon.com/AWSJavaSDK/latest/javadoc/'
        }

        source subprojects.collect { project -> project.sourceSets.main.allJava }
        classpath = files(subprojects.collect { project -> project.sourceSets.main.compileClasspath })
    }

    sonarqube {
        properties {
            property "sonar.projectName", "Trellis Server: Cloud Extension"
            property "sonar.projectKey", "org.trellisldp:trellis-ext-aws"
            property "sonar.links.homepage", "https://www.trellisldp.org"
            property "sonar.links.issue", "https://github.com/trellis-ldp/trellis-ext-aws/issues"
            property "sonar.links.scm_dev", "scm:git:git@github.com:trellis-ldp/trellis-ext-aws.git"
        }
    }

    // Ignore alpha, beta, milestone and release candidates
    dependencyUpdates.resolutionStrategy = {
        componentSelection { rules ->
            rules.all { ComponentSelection selection ->
                boolean rejected = ['alpha', 'beta', 'rc', 'm'].any { qualifier ->
                    selection.candidate.version ==~ /(?i).*[.-]${qualifier}[.\d-]*/
                }
                if (rejected) {
                    selection.reject("Release Candidate")
                }
            }
        }
    }

	task jacocoRootReport(type: org.gradle.testing.jacoco.tasks.JacocoReport) {
		dependsOn = subprojects.test
		additionalSourceDirs.from(files(subprojects.sourceSets.main.allSource.srcDirs))
		sourceDirectories.from(files(subprojects.sourceSets.main.allSource.srcDirs))
		classDirectories.from(files(subprojects.sourceSets.main.output))
        executionData.from(files(subprojects.findAll { ! it.name.endsWith('-deployment') }.jacocoTestReport.executionData))
		reports {
			html.enabled = true
			xml.enabled = true
			csv.enabled = false
		}
	}

    buildScan {
        termsOfServiceUrl = 'https://gradle.com/terms-of-service'
        termsOfServiceAgree = 'yes'
    }

    coveralls {
        sourceDirs = subprojects.sourceSets.main.allSource.srcDirs.flatten()
        jacocoReportPath = "${buildDir}/reports/jacoco/jacocoRootReport/jacocoRootReport.xml"
    }

    tasks.coveralls {
        dependsOn 'jacocoRootReport'
    }

    task getVersion {
        doLast {
            println project.version
        }
    }
}
