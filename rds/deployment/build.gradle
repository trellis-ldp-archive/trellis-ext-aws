apply plugin: 'java'
apply plugin: 'application'
apply plugin: 'distribution'
apply plugin: 'com.palantir.docker'
apply plugin: 'nebula.ospackage-application'

description = 'Trellis AWS Application'
mainClassName = 'org.trellisldp.ext.aws.rds.app.TrellisApplication'
applicationName = 'trellis-aws-rds'

dependencies {
    compile project(':trellis-aws-rds-app')

    runtime("javax.xml.bind:jaxb-api:$jaxbVersion")
}

ospackage {
    packageName = 'trellis-aws-rds'
    release = '1'
    os = LINUX
    license = 'ASL 2.0'
    url = 'https://www.trellisldp.org'
    summary = 'Trellis is a linked data server.'
    packageDescription = '''\
Trellis is a linked data server that can be used for storing large volumes of content,
particularly in cases where that content is stored for years and decades.'''

    user = 'trellis'
    // Note: the linux installers do not depend on Java because it is too complicated to
    // reliably navigate this dependency across linux distributions and supported JRE versions.
    requires('systemd')
    into '/opt/trellis'

    from ('scripts') {
        into 'bin'
        fileMode = 0550
    }

    from ('jar.outputs.files') {
        into 'lib'
    }

    from ('src/dist/etc') {
        fileType CONFIG | NOREPLACE
        into '/opt/trellis/etc'
    }
}

buildRpm {
    preInstall file('src/rpm/preInstall.sh')
    postInstall file('src/rpm/postInstall.sh')
    preUninstall file('src/rpm/preUninstall.sh')
}

buildDeb {
    preInstall file('src/deb/preInstall.sh')
    postInstall file('src/deb/postInstall.sh')
    preUninstall file('src/deb/preUninstall.sh')
}

docker {
    name "trellisldp/trellis-ext-aws-rds:${project.version}"
    tags 'latest'
    dockerfile file('src/docker/Dockerfile')
    files tasks.distTar.outputs, './src/dist/etc/config.yml','./src/docker/command.sh'
    buildArgs([BUILD_VERSION: trellisVersion])
    def gitLabels = ['git.url':'https://github.com/trellis-ldp/trellis-ext-aws']
    try {
        def stdout = new ByteArrayOutputStream()
        exec {
            commandLine 'git', 'rev-parse', '--short', 'HEAD'
            standardOutput = stdout
        }
        def hash = stdout.toString('UTF-8').trim()
        if (!hash.isEmpty()) {
            gitLabels.put('git.commit', hash)
        }
    } catch (all) { }
    labels(gitLabels)
    pull false
    noCache false
}

signing {
    sign buildRpm
    sign buildDeb
    sign distTar
    sign distZip
}

test {
    jacoco {
        enabled = false;
    }
}

task copyDistTask(type: Copy) {
    from '../LICENSE'
    from 'README.md'
    into 'src/dist'
}

assembleDist {
    dependsOn copyDistTask
    dependsOn buildRpm
    dependsOn buildDeb
    dependsOn signBuildRpm
    dependsOn signBuildDeb
}
