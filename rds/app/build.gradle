apply plugin: 'java-library'

description = 'Trellis Cloud Database Application'

ext {
    moduleName = 'org.trellisldp.ext.aws.rds.app'
}

dependencies {
    compile("io.dropwizard:dropwizard-auth:$dropwizardVersion")
    compile("io.dropwizard:dropwizard-core:$dropwizardVersion")
    compile("io.dropwizard:dropwizard-http2:$dropwizardVersion")
    compile("io.dropwizard:dropwizard-jdbi3:$dropwizardVersion")
    compile("io.dropwizard:dropwizard-metrics:$dropwizardVersion")
    compile("io.dropwizard:dropwizard-migrations:$dropwizardVersion")
    compile("io.smallrye:smallrye-config:$smallryeVersion")
    compile("org.apache.commons:commons-rdf-jena:$commonsRdfVersion") {
        exclude group: 'org.apache.jena', module: 'jena-osgi'
        exclude group: 'org.apache.servicemix.bundles', module: 'org.apache.servicemix.bundles.xerces'
    }
    compile("org.apache.jena:jena-arq:$jenaVersion")
    compile("org.eclipse.microprofile.config:microprofile-config-api:$microprofileConfigVersion")
    compile("org.slf4j:slf4j-api:$slf4jVersion")

    compile("mysql:mysql-connector-java:$mysqlVersion")
    compile("org.postgresql:postgresql:$postgresVersion")

    compile("org.trellisldp:trellis-constraint-rules:$trellisVersion")
    compile("org.trellisldp:trellis-io-jena:$trellisVersion")
    compile("org.trellisldp:trellis-api:$trellisVersion")
    compile("org.trellisldp:trellis-http:$trellisVersion")
    compile("org.trellisldp:trellis-vocabulary:$trellisVersion")
    compile("org.trellisldp:trellis-agent:$trellisVersion")
    compile("org.trellisldp:trellis-audit:$trellisVersion")
    compile("org.trellisldp:trellis-event-serialization:$trellisVersion")
    compile("org.trellisldp:trellis-webac:$trellisVersion")
    compile("org.trellisldp:trellis-rdfa:$trellisVersion")
    compile("org.trellisldp:trellis-app:$trellisVersion")
    compile("org.trellisldp.ext:trellis-db:$trellisDbVersion")

    compile project(":trellis-aws")

    runtime("javax.xml.bind:jaxb-api:$jaxbVersion")
    runtime("javax.activation:activation:$activationVersion")
    runtime("org.yaml:snakeyaml:$snakeyamlVersion")

    testCompile("com.h2database:h2:$h2Version")
    testCompile("ch.qos.logback:logback-classic:$logbackVersion")
    testCompile("com.google.guava:guava:$guavaVersion")
    testCompile("com.opentable.components:otj-pg-embedded:$otjPgVersion")
    testCompile("io.dropwizard:dropwizard-client:$dropwizardVersion")
    testCompile("io.dropwizard:dropwizard-testing:$dropwizardVersion")
    testCompile("org.apache.commons:commons-text:$commonsTextVersion")
    testCompile("org.awaitility:awaitility:$awaitilityVersion")
    testCompile("org.mockito:mockito-core:$mockitoVersion")
    testCompile("org.trellisldp:trellis-test:$trellisVersion")
}

test {
	maxParallelForks = (Runtime.runtime.availableProcessors() > 2 ? Runtime.runtime.availableProcessors() : 2) / 2
}

jar {
    manifest {
        attributes('Automatic-Module-Name': moduleName)
    }
}

test {
    systemProperty "trellis.s3.memento.bucket", System.getenv("AWS_TEST_BUCKET") ?: "test.trellisldp.org"
    systemProperty "trellis.s3.binary.bucket", System.getenv("AWS_TEST_BUCKET") ?: "test.trellisldp.org"
    systemProperty "trellis.sns.topic", System.getenv("AWS_TEST_TOPIC") ?: "test-topic"
}

