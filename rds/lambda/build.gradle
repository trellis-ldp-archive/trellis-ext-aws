apply plugin: 'java-library'
apply plugin: 'osgi'

description = 'Trellis cloud extension'

ext {
    moduleName = 'org.trellisldp.ext.aws.rds.lambda'
}

dependencies {
    api("org.trellisldp:trellis-api:$trellisVersion")
    api("com.amazonaws:aws-java-sdk-lambda:$awsVersion")

    implementation("org.jdbi:jdbi3-core:$jdbiVersion")
    implementation("com.amazonaws.serverless:aws-serverless-java-container-jersey:$awsJerseyVersion")
    implementation("commons-codec:commons-codec:$commonsCodecVersion")
    implementation("org.apache.tamaya:tamaya-api:$tamayaVersion")
    implementation("org.apache.tamaya:tamaya-core:$tamayaVersion")
    implementation("org.slf4j:slf4j-api:$slf4jVersion")
    implementation("org.trellisldp:trellis-agent:$trellisVersion")
    implementation("org.trellisldp:trellis-audit:$trellisVersion")
    implementation("org.trellisldp:trellis-constraint-rules:$trellisVersion")
    implementation("org.trellisldp:trellis-event-serialization:$trellisVersion")
    implementation("org.trellisldp:trellis-io-jena:$trellisVersion")
    implementation("org.trellisldp:trellis-http:$trellisVersion")
    implementation("org.trellisldp:trellis-rdfa:$trellisVersion")
    implementation("org.trellisldp:trellis-vocabulary:$trellisVersion")
    implementation("org.trellisldp.ext:trellis-db:$trellisDbVersion")
    implementation project(":trellis-aws")

    implementation("mysql:mysql-connector-java:$mysqlVersion")
    implementation("org.postgresql:postgresql:$postgresVersion")

    runtime("javax.xml.bind:jaxb-api:$jaxbVersion")
    runtime("javax.activation:activation:$activationVersion")
    runtime("org.yaml:snakeyaml:$snakeyamlVersion")

    testImplementation("org.mockito:mockito-core:$mockitoVersion")
    testImplementation("org.glassfish.jersey.inject:jersey-hk2:$jerseyVersion")
}

jar {
    manifest {
        description project.description
        docURL project.docURL
        vendor project.vendor
        license project.license

        instruction 'Automatic-Module-Name', moduleName
        instruction 'Import-Package', '*'
        instruction 'Export-Package', "${moduleName};version=${projectOsgiVersion}"
        instruction 'Require-Capability', '''\
            osgi.extender; filter:="(osgi.extender=osgi.serviceloader.processor)",
            osgi.serviceloader;
                filter:="(osgi.serviceloader=org.apache.commons.rdf.api.RDF)";
                resolution:=mandatory; cardinality:=at_least_one
            '''
    }
}

test {
    systemProperty "trellis.s3.memento.bucket", System.getenv("AWS_TEST_BUCKET") ?: "test.trellisldp.org"
    systemProperty "trellis.s3.binary.bucket", System.getenv("AWS_TEST_BUCKET") ?: "test.trellisldp.org"
    systemProperty "trellis.dynamodb.memento.table", System.getenv("AWS_TEST_TABLE") ?: "trellis-test"
    systemProperty "trellis.sns.topic", System.getenv("AWS_TEST_TOPIC")
    systemProperty "trellis.jdbc.url", System.getenv("AWS_RDS_URL") ?: ""
    systemProperty "trellis.jdbc.username", System.getenv("AWS_RDS_USERNAME")
    systemProperty "trellis.jdbc.password", System.getenv("AWS_JDBC_PASSWORD")
}

